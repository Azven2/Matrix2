// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Matrix2.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CompleMatrixTests")]
    public partial class CompleMatrixTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CompleMatrixTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CompleMatrixTests", "\tIn order to avoid mistakes in a complicated subject\r\n\tI want to test the functio" +
                    "nality of the Complex Matrix tools", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TryParse test")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        [NUnit.Framework.TestCaseAttribute("na", "false", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2 + i3", "true", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2 + 3i", "false", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2", "true", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2 + i0", "true", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2 + i", "true", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2 + i1", "true", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("-2 + i3", "true", "-2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2 - i3", "true", "2", "-3", null)]
        [NUnit.Framework.TestCaseAttribute("2 - i-3", "true", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("i2 + 3", "false", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("i", "true", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("i3", "true", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("-i3", "true", "0", "-3", null)]
        [NUnit.Framework.TestCaseAttribute("- i", "true", "0", "-1", null)]
        public virtual void TryParseTest(string complexNumber, string result, string r, string i, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "myComplexMatrixTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TryParse test", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("a string {0}", complexNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I parse the string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("the result will be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And(string.Format("the Complex number will be {0} + i{1}", r, i), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test the IsEqual method")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestTheIsEqualMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the IsEqual method", new string[] {
                        "myComplexMatrixTests"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table1.AddRow(new string[] {
                        "1 + i",
                        "3 + i2"});
            table1.AddRow(new string[] {
                        "5",
                        "4 - i1"});
#line 31
 testRunner.Given("The following matrix", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table2.AddRow(new string[] {
                        "1 + i",
                        "3 + i2"});
            table2.AddRow(new string[] {
                        "5 + i0",
                        "4 - i"});
#line 35
 testRunner.And("another matrix", ((string)(null)), table2, "And ");
#line 39
 testRunner.When("I compare the matrices for equality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test the IsEqual method for inequality")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestTheIsEqualMethodForInequality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the IsEqual method for inequality", new string[] {
                        "myComplexMatrixTests"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table3.AddRow(new string[] {
                        "1 + i",
                        "3 + i2"});
            table3.AddRow(new string[] {
                        "5",
                        "4 - i1"});
#line 44
 testRunner.Given("The following matrix", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table4.AddRow(new string[] {
                        "1 + i",
                        "3 + i2"});
            table4.AddRow(new string[] {
                        "5 + i0",
                        "3 - i"});
#line 48
 testRunner.And("another matrix", ((string)(null)), table4, "And ");
#line 52
 testRunner.When("I compare the matrices for equality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a zero matrix can be recognised")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestThatAZeroMatrixCanBeRecognised()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a zero matrix can be recognised", new string[] {
                        "myComplexMatrixTests"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table5.AddRow(new string[] {
                        "0 + i0",
                        "0"});
            table5.AddRow(new string[] {
                        "0",
                        "0"});
#line 57
 testRunner.Given("The following matrix", ((string)(null)), table5, "Given ");
#line 61
 testRunner.When("I compare the matrix to a zero matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a matrix can be recognised as not a NULL matrix (1)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestThatAMatrixCanBeRecognisedAsNotANULLMatrix1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a matrix can be recognised as not a NULL matrix (1)", new string[] {
                        "myComplexMatrixTests"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table6.AddRow(new string[] {
                        "i",
                        "0"});
            table6.AddRow(new string[] {
                        "0",
                        "0"});
#line 66
 testRunner.Given("The following matrix", ((string)(null)), table6, "Given ");
#line 70
 testRunner.When("I compare the matrix to a zero matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a matrix can be recognised as not a NULL matrix (2)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestThatAMatrixCanBeRecognisedAsNotANULLMatrix2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a matrix can be recognised as not a NULL matrix (2)", new string[] {
                        "myComplexMatrixTests"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table7.AddRow(new string[] {
                        "1",
                        "0"});
            table7.AddRow(new string[] {
                        "0",
                        "0"});
#line 75
 testRunner.Given("The following matrix", ((string)(null)), table7, "Given ");
#line 79
 testRunner.When("I compare the matrix to a zero matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that an identity matrix can be recognised")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestThatAnIdentityMatrixCanBeRecognised()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that an identity matrix can be recognised", new string[] {
                        "myComplexMatrixTests"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table8.AddRow(new string[] {
                        "1 + i0",
                        "0"});
            table8.AddRow(new string[] {
                        "0 + i0",
                        "1"});
#line 84
 testRunner.Given("The following matrix", ((string)(null)), table8, "Given ");
#line 88
 testRunner.When("I compare the matrix to an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a matrix can be recognised as not an identity matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TestThatAMatrixCanBeRecognisedAsNotAnIdentityMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a matrix can be recognised as not an identity matrix", new string[] {
                        "myComplexMatrixTests"});
#line 92
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table9.AddRow(new string[] {
                        "1",
                        "0"});
            table9.AddRow(new string[] {
                        "0",
                        "i"});
#line 93
 testRunner.Given("The following matrix", ((string)(null)), table9, "Given ");
#line 97
 testRunner.When("I compare the matrix to an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract a complex element from the complex matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void ExtractAComplexElementFromTheComplexMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract a complex element from the complex matrix", new string[] {
                        "myComplexMatrixTests"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table10.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table10.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
            table10.AddRow(new string[] {
                        "3",
                        "-2 - i3"});
#line 102
 testRunner.Given("The following matrix", ((string)(null)), table10, "Given ");
#line 107
 testRunner.When("I look-up element row 2, column 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("the result is the complex number -4 + i3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transpose a complex matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void TransposeAComplexMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transpose a complex matrix", new string[] {
                        "myComplexMatrixTests"});
#line 111
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table11.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table11.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
            table11.AddRow(new string[] {
                        "3",
                        "-2 - i3"});
#line 112
 testRunner.Given("The following matrix", ((string)(null)), table11, "Given ");
#line 117
 testRunner.When("I transpose the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table12.AddRow(new string[] {
                        "7 + i",
                        "5 - i",
                        "3"});
            table12.AddRow(new string[] {
                        "6 + i5",
                        "-4 + i3",
                        "-2 -i3"});
#line 118
 testRunner.Then("the result should be", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I add two complex matrices together")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanIAddTwoComplexMatricesTogether()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I add two complex matrices together", new string[] {
                        "myComplexMatrixTests"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table13.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table13.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 125
 testRunner.Given("The following matrix", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table14.AddRow(new string[] {
                        "-6",
                        "-3 -i3"});
            table14.AddRow(new string[] {
                        "0",
                        "4 - i2"});
#line 129
 testRunner.And("another matrix", ((string)(null)), table14, "And ");
#line 133
 testRunner.When("I add the two matrices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table15.AddRow(new string[] {
                        "1 + i",
                        "3 + i2"});
            table15.AddRow(new string[] {
                        "5 - i",
                        "i"});
#line 134
 testRunner.Then("the result should be", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I subtract one complex matrices from another")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanISubtractOneComplexMatricesFromAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I subtract one complex matrices from another", new string[] {
                        "myComplexMatrixTests"});
#line 140
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table16.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table16.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 141
 testRunner.Given("The following matrix", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table17.AddRow(new string[] {
                        "7 + i2",
                        "3 + i3"});
            table17.AddRow(new string[] {
                        "0",
                        "-4 + i2"});
#line 145
 testRunner.And("another matrix", ((string)(null)), table17, "And ");
#line 149
 testRunner.When("I subtract the second matrix from the first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table18.AddRow(new string[] {
                        "-i",
                        "3 + i2"});
            table18.AddRow(new string[] {
                        "5 - i",
                        "i"});
#line 150
 testRunner.Then("the result should be", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I multiply one matrix by a constant")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanIMultiplyOneMatrixByAConstant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I multiply one matrix by a constant", new string[] {
                        "myComplexMatrixTests"});
#line 156
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table19.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table19.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 157
 testRunner.Given("The following matrix", ((string)(null)), table19, "Given ");
#line 161
 testRunner.When("I multiply the first matrix by the constant 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table20.AddRow(new string[] {
                        "21 + i3",
                        "18 + i15"});
            table20.AddRow(new string[] {
                        "15 - i3",
                        "-12 + i9"});
#line 162
 testRunner.Then("the result should be", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I multiply one matrix with another")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanIMultiplyOneMatrixWithAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I multiply one matrix with another", new string[] {
                        "myComplexMatrixTests"});
#line 168
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table21.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table21.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 169
 testRunner.Given("The following matrix", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table22.AddRow(new string[] {
                        "-i",
                        "3 + i2"});
            table22.AddRow(new string[] {
                        "5 - i",
                        "i"});
#line 173
 testRunner.And("another matrix", ((string)(null)), table22, "And ");
#line 177
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table23.AddRow(new string[] {
                        "36 + i12",
                        "14 + i23"});
            table23.AddRow(new string[] {
                        "-18 + i14",
                        "14 + i3"});
#line 178
 testRunner.Then("the result should be", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I divide one matrix with another")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanIDivideOneMatrixWithAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I divide one matrix with another", new string[] {
                        "myComplexMatrixTests"});
#line 184
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table24.AddRow(new string[] {
                        "36 + i12",
                        "14 + i23"});
            table24.AddRow(new string[] {
                        "-18 + i14",
                        "14 + i3"});
#line 185
 testRunner.Given("The following matrix", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table25.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table25.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 189
 testRunner.And("another matrix", ((string)(null)), table25, "And ");
#line 193
 testRunner.When("I divide the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table26.AddRow(new string[] {
                        "-i",
                        "3 + i2"});
            table26.AddRow(new string[] {
                        "5 - i",
                        "i"});
#line 194
 testRunner.Then("the result should be", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract a sub-matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void ExtractASub_Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract a sub-matrix", new string[] {
                        "myComplexMatrixTests"});
#line 200
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table27.AddRow(new string[] {
                        "1 + i",
                        "2 -i3",
                        "3 -i7"});
            table27.AddRow(new string[] {
                        "i",
                        "4 - i3",
                        "-5 + i"});
            table27.AddRow(new string[] {
                        "1 - i2",
                        "0",
                        "-i"});
#line 201
 testRunner.Given("The following matrix", ((string)(null)), table27, "Given ");
#line 206
 testRunner.When("I extract the submatrix of row 2 column 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table28.AddRow(new string[] {
                        "1 + i",
                        "2 -i3"});
            table28.AddRow(new string[] {
                        "1 - i2",
                        "0"});
#line 207
 testRunner.Then("the result should be", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the negative matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetTheNegativeMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the negative matrix", new string[] {
                        "myComplexMatrixTests"});
#line 213
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table29.AddRow(new string[] {
                        "7 + i",
                        "6 + i5"});
            table29.AddRow(new string[] {
                        "5 - i",
                        "-4 + i3"});
#line 214
 testRunner.Given("The following matrix", ((string)(null)), table29, "Given ");
#line 218
 testRunner.When("I negate the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table30.AddRow(new string[] {
                        "-7 - i",
                        "-6 - i5"});
            table30.AddRow(new string[] {
                        "-5 + i",
                        "4 - i3"});
#line 219
 testRunner.Then("the result should be", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract a minor matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void ExtractAMinorMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract a minor matrix", new string[] {
                        "myComplexMatrixTests"});
#line 225
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table31.AddRow(new string[] {
                        "1 + i",
                        "2 -i3",
                        "3 -i7"});
            table31.AddRow(new string[] {
                        "i",
                        "4 - i3",
                        "-5 + i"});
            table31.AddRow(new string[] {
                        "1 - i2",
                        "0",
                        "-i"});
#line 226
 testRunner.Given("The following matrix", ((string)(null)), table31, "Given ");
#line 231
 testRunner.When("I extract the minor matrix of column 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table32.AddRow(new string[] {
                        "i",
                        "4 - i3"});
            table32.AddRow(new string[] {
                        "1 - i2",
                        "0"});
#line 232
 testRunner.Then("the result should be", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the cofactor")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheCofactor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the cofactor", new string[] {
                        "myComplexMatrixTests"});
#line 238
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table33.AddRow(new string[] {
                        "1",
                        "2",
                        "3"});
            table33.AddRow(new string[] {
                        "0",
                        "4",
                        "5"});
            table33.AddRow(new string[] {
                        "1",
                        "0",
                        "6"});
#line 239
 testRunner.Given("The following matrix", ((string)(null)), table33, "Given ");
#line 244
 testRunner.When("I calculate the cofactor matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table34.AddRow(new string[] {
                        "24",
                        "5",
                        "-4"});
            table34.AddRow(new string[] {
                        "-12",
                        "3",
                        "2"});
            table34.AddRow(new string[] {
                        "-2",
                        "-5",
                        "4"});
#line 245
 testRunner.Then("the result should be", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the determinant (2x2)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheDeterminant2X2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the determinant (2x2)", new string[] {
                        "myComplexMatrixTests"});
#line 252
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table35.AddRow(new string[] {
                        "i",
                        "1 + i2"});
            table35.AddRow(new string[] {
                        "-i3",
                        "-i"});
#line 253
 testRunner.Given("The following matrix", ((string)(null)), table35, "Given ");
#line 257
 testRunner.When("I calculate the determinant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 258
 testRunner.Then("the result is the complex number -5 + i3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the determinant (4x4)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheDeterminant4X4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the determinant (4x4)", new string[] {
                        "myComplexMatrixTests"});
#line 261
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table36.AddRow(new string[] {
                        "3",
                        "2",
                        "0",
                        "1"});
            table36.AddRow(new string[] {
                        "4",
                        "0",
                        "1",
                        "2"});
            table36.AddRow(new string[] {
                        "3",
                        "0",
                        "2",
                        "1"});
            table36.AddRow(new string[] {
                        "9",
                        "2",
                        "3",
                        "1"});
#line 262
 testRunner.Given("The following matrix", ((string)(null)), table36, "Given ");
#line 268
 testRunner.When("I calculate the determinant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
 testRunner.Then("the result is the complex number 24 + i0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the adjunct (2x2)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheAdjunct2X2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the adjunct (2x2)", new string[] {
                        "myComplexMatrixTests"});
#line 272
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table37.AddRow(new string[] {
                        "7",
                        "6"});
            table37.AddRow(new string[] {
                        "5",
                        "4"});
#line 273
 testRunner.Given("The following matrix", ((string)(null)), table37, "Given ");
#line 277
 testRunner.When("I calculate the adjunct matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table38.AddRow(new string[] {
                        "4",
                        "-6"});
            table38.AddRow(new string[] {
                        "-5",
                        "7"});
#line 278
 testRunner.Then("the result should be", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the adjunct (3x3)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheAdjunct3X3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the adjunct (3x3)", new string[] {
                        "myComplexMatrixTests"});
#line 284
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table39.AddRow(new string[] {
                        "-3",
                        "2",
                        "-5"});
            table39.AddRow(new string[] {
                        "-1",
                        "0",
                        "-2"});
            table39.AddRow(new string[] {
                        "3",
                        "-4",
                        "1"});
#line 285
 testRunner.Given("The following matrix", ((string)(null)), table39, "Given ");
#line 290
 testRunner.When("I calculate the adjunct matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table40.AddRow(new string[] {
                        "-8",
                        "18",
                        "-4"});
            table40.AddRow(new string[] {
                        "-5",
                        "12",
                        "-1"});
            table40.AddRow(new string[] {
                        "4",
                        "-6",
                        "2"});
#line 291
 testRunner.Then("the result should be", ((string)(null)), table40, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheInverseMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix", new string[] {
                        "myComplexMatrixTests"});
#line 298
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table41.AddRow(new string[] {
                        "1 + i",
                        "i"});
            table41.AddRow(new string[] {
                        "1 + i",
                        "2 - i"});
#line 299
 testRunner.Given("The following matrix", ((string)(null)), table41, "Given ");
#line 303
 testRunner.When("I calculate the inverse matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table42.AddRow(new string[] {
                        "0.5 - i0.25",
                        "-i0.25"});
            table42.AddRow(new string[] {
                        "-0.25 - i0.25",
                        "0.25 + i0.25"});
#line 304
 testRunner.Then("the result should be", ((string)(null)), table42, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix (reverse check)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheInverseMatrixReverseCheck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix (reverse check)", new string[] {
                        "myComplexMatrixTests"});
#line 310
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table43.AddRow(new string[] {
                        "1 + i",
                        "i"});
            table43.AddRow(new string[] {
                        "1 + i",
                        "2 - i"});
#line 311
 testRunner.Given("The following matrix", ((string)(null)), table43, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table44.AddRow(new string[] {
                        "0.5 - i0.25",
                        "-i0.25"});
            table44.AddRow(new string[] {
                        "-0.25 - i0.25",
                        "0.25 + i0.25"});
#line 315
 testRunner.And("another matrix", ((string)(null)), table44, "And ");
#line 319
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
 testRunner.Then("the resulting matrix will be an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix (reverse check, fail)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CalculateTheInverseMatrixReverseCheckFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix (reverse check, fail)", new string[] {
                        "myComplexMatrixTests"});
#line 323
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table45.AddRow(new string[] {
                        "1 + i",
                        "i"});
            table45.AddRow(new string[] {
                        "1 + i",
                        "2 - i"});
#line 324
 testRunner.Given("The following matrix", ((string)(null)), table45, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table46.AddRow(new string[] {
                        "0.5 - i0.25",
                        "-i0.25"});
            table46.AddRow(new string[] {
                        "-0.5 - i0.25",
                        "0.25 + i0.25"});
#line 328
 testRunner.And("another matrix", ((string)(null)), table46, "And ");
#line 332
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 333
 testRunner.Then("the resulting matrix will not be an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I create a matrix from a string 1")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanICreateAMatrixFromAString1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I create a matrix from a string 1", new string[] {
                        "myComplexMatrixTests"});
#line 336
this.ScenarioSetup(scenarioInfo);
#line 337
 testRunner.Given("The string \"[ 1 + i, 4 - i3, -2 ; i, -7 + i3, 2 - i5 ]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 338
 testRunner.When("I convert the string to a matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table47.AddRow(new string[] {
                        "1 + i",
                        "4 - i3",
                        "-2"});
            table47.AddRow(new string[] {
                        "i",
                        "-7 + i3",
                        "2 - i5"});
#line 339
 testRunner.Then("the result should be", ((string)(null)), table47, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I create a matrix from a string 2")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanICreateAMatrixFromAString2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I create a matrix from a string 2", new string[] {
                        "myComplexMatrixTests"});
#line 345
this.ScenarioSetup(scenarioInfo);
#line 346
 testRunner.Given("The string \"[ 1 + i, 4 - i3; -2, i; -7 + i3, 2 - i5 ]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 347
 testRunner.When("I convert the string to a matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table48.AddRow(new string[] {
                        "1 + i",
                        "4 - i3"});
            table48.AddRow(new string[] {
                        "-2",
                        "i"});
            table48.AddRow(new string[] {
                        "-7 + i3",
                        "2 - i5"});
#line 348
 testRunner.Then("the result should be", ((string)(null)), table48, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the trace of a given matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetTheTraceOfAGivenMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the trace of a given matrix", new string[] {
                        "myComplexMatrixTests"});
#line 355
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table49.AddRow(new string[] {
                        "1 + i",
                        "i"});
            table49.AddRow(new string[] {
                        "1 + i",
                        "-2 + i"});
#line 356
 testRunner.Given("The following matrix", ((string)(null)), table49, "Given ");
#line 360
 testRunner.When("I get the trace of the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 361
 testRunner.Then("the result is the complex number -1 + i2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a diagonal matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseADiagonalMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a diagonal matrix (pass)", new string[] {
                        "myComplexMatrixTests"});
#line 365
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table50.AddRow(new string[] {
                        "3 + i",
                        "0",
                        "0"});
            table50.AddRow(new string[] {
                        "0",
                        "-2 - i3",
                        "0"});
            table50.AddRow(new string[] {
                        "0 + i0",
                        "0",
                        "-i2"});
#line 366
 testRunner.Given("The following matrix", ((string)(null)), table50, "Given ");
#line 371
 testRunner.When("check to see if the matrix is diagonal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 372
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a diagonal matrix (fail)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseADiagonalMatrixFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a diagonal matrix (fail)", new string[] {
                        "myComplexMatrixTests"});
#line 375
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table51.AddRow(new string[] {
                        "3 + i",
                        "0",
                        "0"});
            table51.AddRow(new string[] {
                        "0",
                        "-2 - i3",
                        "0"});
            table51.AddRow(new string[] {
                        "0 + i",
                        "0",
                        "-i2"});
#line 376
 testRunner.Given("The following matrix", ((string)(null)), table51, "Given ");
#line 381
 testRunner.When("check to see if the matrix is diagonal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 382
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseAScalarMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (pass)", new string[] {
                        "myComplexMatrixTests"});
#line 385
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table52.AddRow(new string[] {
                        "4 + i4",
                        "0",
                        "0"});
            table52.AddRow(new string[] {
                        "0",
                        "4 + i4",
                        "0"});
            table52.AddRow(new string[] {
                        "0",
                        "0",
                        "4 + i4"});
#line 386
 testRunner.Given("The following matrix", ((string)(null)), table52, "Given ");
#line 391
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 392
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (fail1)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseAScalarMatrixFail1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (fail1)", new string[] {
                        "myComplexMatrixTests"});
#line 395
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table53.AddRow(new string[] {
                        "4 + i4",
                        "0",
                        "0"});
            table53.AddRow(new string[] {
                        "0",
                        "4 + i4",
                        "0"});
            table53.AddRow(new string[] {
                        "0",
                        "0",
                        "4 + i6"});
#line 396
 testRunner.Given("The following matrix", ((string)(null)), table53, "Given ");
#line 401
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (fail2)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseAScalarMatrixFail2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (fail2)", new string[] {
                        "myComplexMatrixTests"});
#line 405
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table54.AddRow(new string[] {
                        "i3",
                        "0",
                        "0"});
            table54.AddRow(new string[] {
                        "0",
                        "i3",
                        "0"});
            table54.AddRow(new string[] {
                        "i",
                        "0",
                        "i3"});
#line 406
 testRunner.Given("The following matrix", ((string)(null)), table54, "Given ");
#line 411
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 412
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a involution matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseAInvolutionMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a involution matrix (pass)", new string[] {
                        "myComplexMatrixTests"});
#line 415
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table55.AddRow(new string[] {
                        "4",
                        "-1"});
            table55.AddRow(new string[] {
                        "15",
                        "-4 + i0"});
#line 416
 testRunner.Given("The following matrix", ((string)(null)), table55, "Given ");
#line 420
 testRunner.When("check to see if the matrix is involution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 421
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a nilpotent matrix for an index (pass)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseANilpotentMatrixForAnIndexPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a nilpotent matrix for an index (pass)", new string[] {
                        "myComplexMatrixTests"});
#line 424
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table56.AddRow(new string[] {
                        "5",
                        "-3",
                        "2"});
            table56.AddRow(new string[] {
                        "15",
                        "-9",
                        "6"});
            table56.AddRow(new string[] {
                        "10",
                        "-6",
                        "4"});
#line 425
 testRunner.Given("The following matrix", ((string)(null)), table56, "Given ");
#line 430
 testRunner.And("the index is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
 testRunner.When("check to see if the matrix is nilpotent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 432
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a nilpotent matrix for all indecise (pass)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseANilpotentMatrixForAllIndecisePass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a nilpotent matrix for all indecise (pass)", new string[] {
                        "myComplexMatrixTests"});
#line 435
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table57.AddRow(new string[] {
                        "0",
                        "2 + i",
                        "1 - i7",
                        "-1 + i6"});
            table57.AddRow(new string[] {
                        "0",
                        "0",
                        "i",
                        "2 + i3"});
            table57.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table57.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 436
 testRunner.Given("The following matrix", ((string)(null)), table57, "Given ");
#line 442
 testRunner.When("check to see if the matrix is nilpotent for all", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 443
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (fail)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (fail)", new string[] {
                        "myComplexMatrixTests"});
#line 446
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table58.AddRow(new string[] {
                        "0",
                        "2 + i",
                        "1 - i7",
                        "-1 + i6"});
            table58.AddRow(new string[] {
                        "0",
                        "0",
                        "i",
                        "2 + i3"});
            table58.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table58.AddRow(new string[] {
                        "i",
                        "0",
                        "0",
                        "0"});
#line 447
 testRunner.Given("The following matrix", ((string)(null)), table58, "Given ");
#line 453
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 454
 testRunner.Then("the matrix type will be Not Triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (upper)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeUpper()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (upper)", new string[] {
                        "myComplexMatrixTests"});
#line 457
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table59.AddRow(new string[] {
                        "0",
                        "2 + i",
                        "1 - i7",
                        "-1 + i6"});
            table59.AddRow(new string[] {
                        "0",
                        "0",
                        "i",
                        "2 + i3"});
            table59.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table59.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 458
 testRunner.Given("The following matrix", ((string)(null)), table59, "Given ");
#line 464
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
 testRunner.Then("the matrix type will be Upper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (lower)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeLower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (lower)", new string[] {
                        "myComplexMatrixTests"});
#line 468
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table60.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table60.AddRow(new string[] {
                        "-2 + i3",
                        "0",
                        "0",
                        "0"});
            table60.AddRow(new string[] {
                        "-1 + i5",
                        "5 - i6",
                        "0",
                        "0"});
            table60.AddRow(new string[] {
                        "i2",
                        "-1 + i3",
                        "3 -i7",
                        "0"});
#line 469
 testRunner.Given("The following matrix", ((string)(null)), table60, "Given ");
#line 475
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 476
 testRunner.Then("the matrix type will be Lower", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise an identity matrix to a power")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRaiseAnIdentityMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise an identity matrix to a power", new string[] {
                        "myComplexMatrixTests"});
#line 479
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table61.AddRow(new string[] {
                        "1",
                        "0",
                        "0"});
            table61.AddRow(new string[] {
                        "0",
                        "1 + i0",
                        "0"});
            table61.AddRow(new string[] {
                        "0 + i0",
                        "0",
                        "1"});
#line 480
 testRunner.Given("The following matrix", ((string)(null)), table61, "Given ");
#line 485
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table62.AddRow(new string[] {
                        "1",
                        "0",
                        "0"});
            table62.AddRow(new string[] {
                        "0",
                        "1",
                        "0"});
            table62.AddRow(new string[] {
                        "0",
                        "0",
                        "1 + i0"});
#line 486
 testRunner.Then("the result should be", ((string)(null)), table62, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a diagonal matrix to a power")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRaiseADiagonalMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a diagonal matrix to a power", new string[] {
                        "myComplexMatrixTests"});
#line 493
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table63.AddRow(new string[] {
                        "i",
                        "0",
                        "0"});
            table63.AddRow(new string[] {
                        "0",
                        "-i2",
                        "0"});
            table63.AddRow(new string[] {
                        "0",
                        "0",
                        "i3"});
#line 494
 testRunner.Given("The following matrix", ((string)(null)), table63, "Given ");
#line 499
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table64.AddRow(new string[] {
                        "-i",
                        "0",
                        "0"});
            table64.AddRow(new string[] {
                        "0",
                        "i8",
                        "0"});
            table64.AddRow(new string[] {
                        "0",
                        "0",
                        "-i27"});
#line 500
 testRunner.Then("the result should be", ((string)(null)), table64, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a matrix to the power of -1")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRaiseAMatrixToThePowerOf_1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a matrix to the power of -1", new string[] {
                        "myComplexMatrixTests"});
#line 507
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table65.AddRow(new string[] {
                        "1 + i",
                        "i"});
            table65.AddRow(new string[] {
                        "1 + i",
                        "2 - i"});
#line 508
 testRunner.Given("The following matrix", ((string)(null)), table65, "Given ");
#line 512
 testRunner.When("I raise the matrix to the power of -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table66.AddRow(new string[] {
                        "0.5 - i0.25",
                        "-i0.25"});
            table66.AddRow(new string[] {
                        "-0.25 - i0.25",
                        "0.25 + i0.25"});
#line 513
 testRunner.Then("the result should be", ((string)(null)), table66, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a matrix to a power")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void CanRaiseAMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a matrix to a power", new string[] {
                        "myComplexMatrixTests"});
#line 519
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table67.AddRow(new string[] {
                        "1",
                        "2"});
            table67.AddRow(new string[] {
                        "-1",
                        "1"});
#line 520
 testRunner.Given("The following matrix", ((string)(null)), table67, "Given ");
#line 524
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table68.AddRow(new string[] {
                        "-5",
                        "2"});
            table68.AddRow(new string[] {
                        "-1",
                        "-5"});
#line 525
 testRunner.Then("the result should be", ((string)(null)), table68, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix", new string[] {
                        "myComplexMatrixTests"});
#line 531
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table69.AddRow(new string[] {
                        "-12 + i18",
                        "24 + i30"});
            table69.AddRow(new string[] {
                        "6 + i0",
                        "-18 - i48"});
#line 532
 testRunner.Given("The following matrix", ((string)(null)), table69, "Given ");
#line 536
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table70.AddRow(new string[] {
                        "-2 + i3",
                        "4 +i5"});
            table70.AddRow(new string[] {
                        "1",
                        "-3 - i8"});
#line 537
 testRunner.Then("the result should be", ((string)(null)), table70, "Then ");
#line 541
 testRunner.And("the result is 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix 2")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrix2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix 2", new string[] {
                        "myComplexMatrixTests"});
#line 544
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table71.AddRow(new string[] {
                        "-128 + i512",
                        "128 + i1024"});
            table71.AddRow(new string[] {
                        "256 + i0",
                        "-512 - i2048"});
#line 545
 testRunner.Given("The following matrix", ((string)(null)), table71, "Given ");
#line 549
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table72.AddRow(new string[] {
                        "-1 + i4",
                        "1 + i8"});
            table72.AddRow(new string[] {
                        "2",
                        "-4 - i16"});
#line 550
 testRunner.Then("the result should be", ((string)(null)), table72, "Then ");
#line 554
 testRunner.And("the result is 128", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix (no change)")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrixNoChange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix (no change)", new string[] {
                        "myComplexMatrixTests"});
#line 557
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table73.AddRow(new string[] {
                        "-2 + i3",
                        "4 +i5"});
            table73.AddRow(new string[] {
                        "1",
                        "-3 - i8"});
#line 558
 testRunner.Given("The following matrix", ((string)(null)), table73, "Given ");
#line 562
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table74.AddRow(new string[] {
                        "-2 + i3",
                        "4 +i5"});
            table74.AddRow(new string[] {
                        "1",
                        "-3 - i8"});
#line 563
 testRunner.Then("the result should be", ((string)(null)), table74, "Then ");
#line 567
 testRunner.And("the result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Eigen value of a 2x2 matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetEigenValueOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Eigen value of a 2x2 matrix", new string[] {
                        "myComplexMatrixTests"});
#line 570
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table75.AddRow(new string[] {
                        "2",
                        "4"});
            table75.AddRow(new string[] {
                        "3",
                        "13"});
#line 571
 testRunner.Given("The following matrix", ((string)(null)), table75, "Given ");
#line 575
 testRunner.When("I get the Eigen value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 576
 testRunner.Then("the complex Eigen values are 1 and 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Eigen vectors of a 2x2 matrix")]
        [NUnit.Framework.CategoryAttribute("myComplexMatrixTests")]
        public virtual void GetEigenVectorsOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Eigen vectors of a 2x2 matrix", new string[] {
                        "myComplexMatrixTests"});
#line 579
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table76.AddRow(new string[] {
                        "3",
                        "5"});
            table76.AddRow(new string[] {
                        "-2",
                        "-4"});
#line 580
 testRunner.Given("The following matrix", ((string)(null)), table76, "Given ");
#line 584
 testRunner.When("I get the Eigen vectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "V"});
            table77.AddRow(new string[] {
                        "5"});
            table77.AddRow(new string[] {
                        "-2"});
#line 585
 testRunner.Then("the complex Eigen vector is", ((string)(null)), table77, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "V"});
            table78.AddRow(new string[] {
                        "1"});
            table78.AddRow(new string[] {
                        "-1"});
#line 589
 testRunner.And("the other complex vector is", ((string)(null)), table78, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the square root of a 2x2 matrix")]
        public virtual void CanIFindTheSquareRootOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the square root of a 2x2 matrix", ((string[])(null)));
#line 594
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table79.AddRow(new string[] {
                        "33",
                        "24"});
            table79.AddRow(new string[] {
                        "48",
                        "57"});
#line 595
 testRunner.Given("The following matrix", ((string)(null)), table79, "Given ");
#line 599
 testRunner.When("I calculate the matrix square roots", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table80.AddRow(new string[] {
                        "5",
                        "2"});
            table80.AddRow(new string[] {
                        "4",
                        "7"});
#line 600
 testRunner.Then("one root should be", ((string)(null)), table80, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table81.AddRow(new string[] {
                        "1",
                        "4"});
            table81.AddRow(new string[] {
                        "8",
                        "5"});
#line 604
 testRunner.And("one root should be", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table82.AddRow(new string[] {
                        "-5",
                        "-2"});
            table82.AddRow(new string[] {
                        "-4",
                        "-7"});
#line 608
 testRunner.And("one root should be", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table83.AddRow(new string[] {
                        "-1",
                        "-4"});
            table83.AddRow(new string[] {
                        "-8",
                        "-5"});
#line 612
 testRunner.And("one root should be", ((string)(null)), table83, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
